1.spring-boot启动流程
	1.1主函数调用
	ConfigurableApplicationContext ctx = SpringApplication.run(MySpringApplication.class, args);
	
	--------------------------------实例化对象-------------------------------------
	1.2实例化SpringApplication对象
	new SpringApplication(sources)
	
	1.3实例化时调用 
	initialize(sources);
	
	1.4具体方法如下
	//判断是否是web的环境
	this.webEnvironment = deduceWebEnvironment();   -----1.4.1
	//读取META-INF/spring.factories文件中配置的上下文初始化器ApplicationContextInitializer实例化并设置到SpringApplication的initializers集合中
	setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));   -----1.4.2
	//读取META-INF/spring.factories文件中配置的应用监听器ApplicationListener实例化并设置到SpringApplication的listeners集合中
	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
	//设置主类
	this.mainApplicationClass = deduceMainApplicationClass();
	
		1.4.1 deduceWebEnvironment()方法
		推断是否是web的环境，通过判断是否存在
		private static final String[] WEB_ENVIRONMENT_CLASSES = { "javax.servlet.Servlet",
			"org.springframework.web.context.ConfigurableWebApplicationContext" }; 这两个类，判断是否是web环境
		例子中	mainApplicationClass = false;
		
		1.4.2 setInitializers()
			  通过SpringFactoriesLoader的静态方法loadFactoryNames()加载classpath中的所有的上下文初始化器
		      通过SpringApplication对象的createSpringFactoriesInstances()方法实例化所有的上下文初始化器
			  setListeners()与setInitializers()方法类似
	
	--------------------------------执行SpringApplication对象run方法-------------------------------------	
	1.5 具体方法如下
	public ConfigurableApplicationContext run(String... args) {
		//初始化计时器
		StopWatch stopWatch = new StopWatch();
		//计时器启动
		stopWatch.start();
		//
		ConfigurableApplicationContext context = null;
		FailureAnalyzers analyzers = null;
		configureHeadlessProperty();
		
		//同上1.4.2 获取META-INF/spring.factories文件中配置的应用启动监听器SpringApplicationRunListeners并实例化
		SpringApplicationRunListeners listeners = getRunListeners(args);
		//监听器启动
		listeners.starting();                                                                -----1.5.1
		try {
			ApplicationArguments applicationArguments = new DefaultApplicationArguments(
					args);
			
			//准备环境对象
			ConfigurableEnvironment environment = prepareEnvironment(listeners,
					applicationArguments);
					
			//准备打印对象
			Banner printedBanner = printBanner(environment);
			
			//创建上下文对象
			context = createApplicationContext();
			
			//错误原因分析
			analyzers = new FailureAnalyzers(context);
			
			//准备上下文对象
			prepareContext(context, environment, listeners, applicationArguments,
					printedBanner);
					
			//刷新上下文对象
			refreshContext(context);
			
			//
			afterRefresh(context, applicationArguments);
			
			//发布启动完成事件
			listeners.finished(context, null);
			
			//计时器结束
			stopWatch.stop();
			
			if (this.logStartupInfo) {
				new StartupInfoLogger(this.mainApplicationClass)
						.logStarted(getApplicationLog(), stopWatch);
			}
			return context;
		}
		catch (Throwable ex) {
			handleRunFailure(context, listeners, analyzers, ex);
			throw new IllegalStateException(ex);
		}
	}
	
	
		1.5.1 listeners.starting() 遍历所有的应用启动监听器并执行每一个监听器的starting()方法
		for (SpringApplicationRunListener listener : this.listeners) {
			listener.starting();
		}
		在springboot项目中我们通过
		List<String> listens  = SpringFactoriesLoader.loadFactoryNames(SpringApplicationRunListener.class, null);
    	for(String l:listens)
    	{
    		System.out.println(l);
    	}
		获取到加载的默认SpringApplicationRunListener为org.springframework.boot.context.event.EventPublishingRunListener
		EventPublishingRunListener其实就是一个事件发布的监听器
		
		public void starting() {
		this.initialMulticaster
				.multicastEvent(new ApplicationStartedEvent(this.application, this.args));
		}
		
		
		
		最后执行的是之前加载的应用监听器
		for (final ApplicationListener<?> listener : getApplicationListeners(event, type)) {
			Executor executor = getTaskExecutor();
			if (executor != null) {
				executor.execute(new Runnable() {
					@Override
					public void run() {
						invokeListener(listener, event);
					}
				});
			}
			else {
				invokeListener(listener, event);
			}
		}
		
		
		------------------最重要的refreshContext()方法为spring bean构建的核心方法-----------
			@Override
		public void refresh() throws BeansException, IllegalStateException {
			synchronized (this.startupShutdownMonitor) {
			// Prepare this context for refreshing.
			prepareRefresh();

			// Tell the subclass to refresh the internal bean factory.
			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

			// Prepare the bean factory for use in this context.
			prepareBeanFactory(beanFactory);

			try {
				// Allows post-processing of the bean factory in context subclasses.
				postProcessBeanFactory(beanFactory);

				// Invoke factory processors registered as beans in the context.
				invokeBeanFactoryPostProcessors(beanFactory);

				// Register bean processors that intercept bean creation.
				registerBeanPostProcessors(beanFactory);

				// Initialize message source for this context.
				initMessageSource();

				// Initialize event multicaster for this context.
				initApplicationEventMulticaster();

				// Initialize other special beans in specific context subclasses.
				onRefresh();

				// Check for listener beans and register them.
				registerListeners();

				// Instantiate all remaining (non-lazy-init) singletons.
				finishBeanFactoryInitialization(beanFactory);

				// Last step: publish corresponding event.
				finishRefresh();
			}

			catch (BeansException ex) {
				if (logger.isWarnEnabled()) {
					logger.warn("Exception encountered during context initialization - " +
							"cancelling refresh attempt: " + ex);
				}

				// Destroy already created singletons to avoid dangling resources.
				destroyBeans();

				// Reset 'active' flag.
				cancelRefresh(ex);

				// Propagate exception to caller.
				throw ex;
			}

			finally {
				// Reset common introspection caches in Spring's core, since we
				// might not ever need metadata for singleton beans anymore...
				resetCommonCaches();
			}
		}
	}
	
	
	
	
	------------------------初始化所有非懒加载的单例bean------------------------
	
	// Instantiate all remaining (non-lazy-init) singletons.
	finishBeanFactoryInitialization(beanFactory);
	主要的方法为 
	BeanFactory.getBean(beanNm) 实际对象为 DefaultListableBeanFactory.getBean(beanNm);
	
	
	
	-----------------初始化bean整体流程--------------
	
	1. InstantiationAwareBeanPostProcessor postProcessBeforeInstantiation......
		执行InstantiationAwareBeanPostProcessor对象的postProcessBeforeInstantiation方法
		（InstantiationAwareBeanPostProcessor接口中自定义的方法，bean对象实例化之前，bean对象还不存在）
		postProcessBeforeInstantiation方法是最先执行的方法，它在目标对象实例化之前调用，该方法的返回值类型是Object，我们可以返回任何类型的值。
		由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。
		如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，其它方法不再调用；---------------------------------------------
	                                            ↓                                                                                                                    ↓
	2. MchtServerImpl construtor......                                                                                                                               ↓
		bean对象实例化                                                                                                                                               ↓
	                                            ↓
	3. InstantiationAwareBeanPostProcessor postProcessAfterInstantiation......                                                                                       ↓
		执行InstantiationAwareBeanPostProcessor对象的postProcessAfterInstantiation方法
		（InstantiationAwareBeanPostProcessor接口中自定义的方法，bean对象实例化之后，bean对象已存在）                                                                ↓
	                                            ↓
	4. InstantiationAwareBeanPostProcessor postProcessPropertyValues......
		执行InstantiationAwareBeanPostProcessor对象的postProcessPropertyValues方法                                                                                   ↓
		（InstantiationAwareBeanPostProcessor接口中自定义的方法，可修改bean对象的属性值）                                                                       
	                                            ↓											
	5. MchtServerImpl set property.....                                                                                                                              ↓
		bean对象设置属性
	                                            ↓											
	6. BeanNameAware setBeanName.....
		bean对象如果实现了BeanNameAware接口执行setBeanName方法设置bean名称                                                                                           ↓
	                                            ↓	
	7. BeanFactoryAware setBeanFactory.....
		bean对象如果实现了BeanFactoryAware接口执行setBeanFactory方法设置beanFactory
	                                            ↓												
	8. BeanPostProcessor postProcessBeforeInitialization...... 
	    执行BeanPostProcessor对象的postProcessBeforeInitialization 方法，在执行init-method方法前执行                                                                 ↓
	                                            ↓											
	9. InstantiationAwareBeanPostProcessor postProcessBeforeInitialization...... 
	    执行InstantiationAwareBeanPostProcessor对象的postProcessBeforeInitialization 方法，在执行init-method方法前执行
		由于InstantiationAwareBeanPostProcessor继承自BeanPostProcessor接口，每一个InstantiationAwareBeanPostProcessor对象都是一个BeanPostProcessor对象
	                                            ↓
	10. InitializingBean afterPropertiesSet..... 
	    bean对象如果实现了InitializingBean接口，则执行 InitializingBean 的 afterPropertiesSet 方法
	                                            ↓												
	11. MchtServerImpl init-method......
	    执行bean定义的初始化方法                                                                                                                                     ↓
	                                            ↓											                                                                         ↓	
	12. BeanPostProcessor postProcessAfterInitialization......                                                                                                      ←
	    执行BeanPostProcessor对象的 postProcessAfterInitialization 方法，在执行init-method方法后执行
	                                            ↓												
	13. InstantiationAwareBeanPostProcessor postProcessAfterInitialization......
	    执行 InstantiationAwareBeanPostProcessor 对象的 postProcessAfterInitialization 方法，在执行init-method方法后执行
	    同9                                       										
												
												
	

	
	------------------beanFactory三级缓存----------
	//一级缓存
	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);

	//三级缓存
	/** Cache of singleton factories: bean name --> ObjectFactory */
	private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);

	//二级缓存
	/** Cache of early singleton objects: bean name --> bean instance */
	private final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);
	
	
	-------------------初始化实例--------------											
	<bean id="simpleBeanMcht" class="org.dubbo.server.impl.SimpleBeanMcht">
		<property name="oprInfoServer" ref="simpleBeanOpr"></property>
	</bean>
    <bean id="simpleBeanOpr" class="org.dubbo.server.impl.SimpleBeanOpr">
		<property name="mchtInfoServer" ref="simpleBeanMcht"></property>
	</bean>

	1. getBean("simpleBeanMcht");                        -----DefaultListableBeanFactory(AbstractBeanFactory) 对象方法
	   初始化 simpleBeanMcht 入口											
												
	2. doGetBean(name, null, null, false);               -----DefaultListableBeanFactory(AbstractBeanFactory) 对象方法
	   实际执行方法
	
	3. getSingleton(beanName, true);                     -----DefaultListableBeanFactory(DefaultSingletonBeanRegistry) 对象方法
         尝试从缓存中获取bean，simpleBeanMcht 还没有创建，返回为空
		
		protected Object getSingleton(String beanName, boolean allowEarlyReference) {
		//从一级缓存中获取bean
		Object singletonObject = this.singletonObjects.get(beanName);
		//如果没有获取到，则判断在正在创建对象 singletonsCurrentlyInCreation 集合中存在
		if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
			synchronized (this.singletonObjects) {
				//从二级缓存中获取bean
				singletonObject = this.earlySingletonObjects.get(beanName);
				if (singletonObject == null && allowEarlyReference) {
				//从三级缓存中获取bean
					ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
					if (singletonFactory != null) {
						singletonObject = singletonFactory.getObject();
						this.earlySingletonObjects.put(beanName, singletonObject);
						this.singletonFactories.remove(beanName);
					}
				}
			}
		}
		return (singletonObject != NULL_OBJECT ? singletonObject : null);
		}
		
	4. markBeanAsCreated(String beanName)                ----DefaultListableBeanFactory(AbstractBeanFactory)										
		添加 要创建的bean名称 simpleBeanMcht 到 alreadyCreated 集合中	

	5. 	sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {                ----DefaultListableBeanFactory(AbstractBeanFactory)

						@Override
						public Object getObject() throws BeansException {
							try {
								return createBean(beanName, mbd, args);
							}
							catch (BeansException ex) {
								// Explicitly remove instance from singleton cache: It might have been put there
								// eagerly by the creation process, to allow for circular reference resolution.
								// Also remove any beans that received a temporary reference to the bean.
								destroySingleton(beanName);
								throw ex;
							}
						}
					});

		构建一个内部类对象，并作为参数传给 getSingleton 方法
		new ObjectFactory<Object>() 是一个回调方法对象
		beanFactory通过 getSingleton 方法，调用内部类的 getObject 方法
		getObject又回调 beanFactory 的 createBean 方法完成创建bean
	
	6. public Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {     ----DefaultListableBeanFactory(DefaultSingletonBeanRegistry)
		Assert.notNull(beanName, "'beanName' must not be null");
		synchronized (this.singletonObjects) {
		    //同步一级缓存并再次从一级缓存查找 simpleBeanMcht 对象
			Object singletonObject = this.singletonObjects.get(beanName);
			if (singletonObject == null) {
				if (this.singletonsCurrentlyInDestruction) {
					throw new BeanCreationNotAllowedException(beanName,
							"Singleton bean creation not allowed while singletons of this factory are in destruction " +
							"(Do not request a bean from a BeanFactory in a destroy method implementation!)");
				}
				if (logger.isDebugEnabled()) {
					logger.debug("Creating shared instance of singleton bean '" + beanName + "'");
				}
				
				//将 simpleBeanMcht 名称添加到 singletonsCurrentlyInCreation 集合中
				beforeSingletonCreation(beanName);
				boolean newSingleton = false;
				boolean recordSuppressedExceptions = (this.suppressedExceptions == null);
				if (recordSuppressedExceptions) {
					this.suppressedExceptions = new LinkedHashSet<Exception>();
				}
				try {
				    //核心 调用内部类的回调方法 getObject
					singletonObject = singletonFactory.getObject();
					newSingleton = true;
				}
				catch (IllegalStateException ex) {
					// Has the singleton object implicitly appeared in the meantime ->
					// if yes, proceed with it since the exception indicates that state.
					singletonObject = this.singletonObjects.get(beanName);
					if (singletonObject == null) {
						throw ex;
					}
				}
				catch (BeanCreationException ex) {
					if (recordSuppressedExceptions) {
						for (Exception suppressedException : this.suppressedExceptions) {
							ex.addRelatedCause(suppressedException);
						}
					}
					throw ex;
				}
				finally {
					if (recordSuppressedExceptions) {
						this.suppressedExceptions = null;
					}
					afterSingletonCreation(beanName);
				}
				if (newSingleton) {
					addSingleton(beanName, singletonObject);
				}
			}
			return (singletonObject != NULL_OBJECT ? singletonObject : null);
		}
	}											
												
		6.1 singletonFactory.getObject(); 
			在5中描述了getObject又回调 beanFactory 的 createBean 方法完成创建bean
			
	7. protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) ----DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory)
		开始创建bean 
		
	8.	Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
		实例化之前执行 InstantiationAwareBeanPostProcessors 中的 applyBeanPostProcessorsBeforeInstantiation >>>>>>对应流程中的1
		
		protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {
		Object bean = null;
		if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {
			// Make sure bean class is actually resolved at this point.
			if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
				Class<?> targetType = determineTargetType(beanName, mbd);
				if (targetType != null) {
					bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
					if (bean != null) {
					//需要注意的是如果 applyBeanPostProcessorsAfterInitialization 返回一个对象
					 //之后直接执行 applyBeanPostProcessorsAfterInitialization 并返回 此对象（比如一个代理对象）
						bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
					}
				}
			}
			mbd.beforeInstantiationResolved = (bean != null);
		}
		return bean;
	}
												
	9. Object beanInstance = doCreateBean(beanName, mbdToUse, args);
       真正创建bean的方法
		
		protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)  ----DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory)
			throws BeanCreationException {

		//9.1 定义一个bean的包装类
		// 此包装类主要用来设置 bean的属性值
		BeanWrapper instanceWrapper = null;
		if (mbd.isSingleton()) {
			instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
		}
		if (instanceWrapper == null) {
		    //9.2 实例化包装类对象
			//调用 SimpleBeanMcht 类的无参构造函数实例化 simpleBeanMcht 对象并封装成一个包装对象                   >>>>>>对应流程中的2
			instanceWrapper = createBeanInstance(beanName, mbd, args);
		}
		
		//9.3 获取真正的bean simpleBeanMcht 
		final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
		
		//9.4 获取simpleBeanMcht 类型
		Class<?> beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
		mbd.resolvedTargetType = beanType;

		// Allow post-processors to modify the merged bean definition.
		synchronized (mbd.postProcessingLock) {
			if (!mbd.postProcessed) {
				try {
					applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
				}
				catch (Throwable ex) {
					throw new BeanCreationException(mbd.getResourceDescription(), beanName,
							"Post-processing of merged bean definition failed", ex);
				}
				mbd.postProcessed = true;
			}
		}

		// Eagerly cache singletons to be able to resolve circular references
		// even when triggered by lifecycle interfaces like BeanFactoryAware.
		boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&
				isSingletonCurrentlyInCreation(beanName));
		if (earlySingletonExposure) {
			if (logger.isDebugEnabled()) {
				logger.debug("Eagerly caching bean '" + beanName +
						"' to allow for resolving potential circular references");
			}
			//9.5 构建一个内部类ObjectFactory对象 并添加到三级缓存 singletonFactories 中
			// 用于提前暴露，解决循环依赖问题
			addSingletonFactory(beanName, new ObjectFactory<Object>() {
				@Override
				public Object getObject() throws BeansException {
					return getEarlyBeanReference(beanName, mbd, bean);
				}
			});
		}

		// Initialize the bean instance.
		Object exposedObject = bean;
		try {
		    //9.6 初始化 simpleBeanMcht 对象 ，给刚实例化的 simpleBeanMcht 对象设置属性值
			populateBean(beanName, mbd, instanceWrapper);
			if (exposedObject != null) {
				exposedObject = initializeBean(beanName, exposedObject, mbd);
			}
		}
		catch (Throwable ex) {
			if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {
				throw (BeanCreationException) ex;
			}
			else {
				throw new BeanCreationException(
						mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);
			}
		}

		if (earlySingletonExposure) {
			Object earlySingletonReference = getSingleton(beanName, false);
			if (earlySingletonReference != null) {
				if (exposedObject == bean) {
					exposedObject = earlySingletonReference;
				}
				else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
					String[] dependentBeans = getDependentBeans(beanName);
					Set<String> actualDependentBeans = new LinkedHashSet<String>(dependentBeans.length);
					for (String dependentBean : dependentBeans) {
						if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
							actualDependentBeans.add(dependentBean);
						}
					}
					if (!actualDependentBeans.isEmpty()) {
						throw new BeanCurrentlyInCreationException(beanName,
								"Bean with name '" + beanName + "' has been injected into other beans [" +
								StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +
								"] in its raw version as part of a circular reference, but has eventually been " +
								"wrapped. This means that said other beans do not use the final version of the " +
								"bean. This is often the result of over-eager type matching - consider using " +
								"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.");
					}
				}
			}
		}

		// Register bean as disposable.
		try {
			registerDisposableBeanIfNecessary(beanName, bean, mbd);
		}
		catch (BeanDefinitionValidationException ex) {
			throw new BeanCreationException(
					mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);
		}

		return exposedObject;
	}
												
	10. populateBean(beanName, mbd, instanceWrapper);											
		初始化 simpleBeanMcht 对象 ，给刚实例化的 simpleBeanMcht 对象设置属性值
		
        //遍历所有的InstantiationAwareBeanPostProcessor 接口对象并执行 postProcessAfterInstantiation 方法 >>>>>>对应流程中的3
		if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
			for (BeanPostProcessor bp : getBeanPostProcessors()) {
				if (bp instanceof InstantiationAwareBeanPostProcessor) {
					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
					if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
						continueWithPropertyPopulation = false;
						break;
					}
				}
			}
		}
		
		//遍历所有的InstantiationAwareBeanPostProcessor 接口对象并执行 postProcessPropertyValues 方法 >>>>>>对应流程中的4
		for (BeanPostProcessor bp : getBeanPostProcessors()) {
					if (bp instanceof InstantiationAwareBeanPostProcessor) {
						InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
						pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
						if (pvs == null) {
							return;
						}
					}
			
	11. applyPropertyValues(beanName, mbd, bw, pvs);                                                >>>>>>对应流程中的5 
		simpleBeanMcht 对象属性初始化
		
		//11.1 实例化一个 bean定义中值的处理器
		BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter);
		
		//11.2 遍历beanDefinition中的所有的属性定义
		// simpleBeanMcht 对象有一个属性  OprInfoServer oprInfoServer;
		for (PropertyValue pv : original) {
			if (pv.isConverted()) {
				deepCopy.add(pv);
			}
			else {
				//11.3 获取属性名称 oprInfoServer
				String propertyName = pv.getName();
				
				//11.4 获取属性值 由于 oprInfoServer 属性也是一个bean 所有获取到的 originalValue 为一个 RuntimeBeanReference 引用对象
				Object originalValue = pv.getValue();
				
				//11.5 处理 oprInfoServer 属性
				Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);
				
				Object convertedValue = resolvedValue;
				boolean convertible = bw.isWritableProperty(propertyName) &&
						!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);
				if (convertible) {
					convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);
				}
				// Possibly store converted value in merged bean definition,
				// in order to avoid re-conversion for every created bean instance.
				if (resolvedValue == originalValue) {
					if (convertible) {
						pv.setConvertedValue(convertedValue);
					}
					deepCopy.add(pv);
				}
				else if (convertible && originalValue instanceof TypedStringValue &&
						!((TypedStringValue) originalValue).isDynamic() &&
						!(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) {
					pv.setConvertedValue(convertedValue);
					deepCopy.add(pv);
				}
				else {
					resolveNecessary = true;
					deepCopy.add(new PropertyValue(pv, convertedValue));
				}
			}
		}
												
												
	 12. valueResolver.resolveValueIfNecessary(pv, originalValue);                   ------BeanDefinitionValueResolver.resolveValueIfNecessary
	     处理 oprInfoServer 属性
		 
		 //判断属性值类型 当前属性 oprInfoServer 为 RuntimeBeanReference 类型
	    if (value instanceof RuntimeBeanReference) {
			RuntimeBeanReference ref = (RuntimeBeanReference) value;
			return resolveReference(argName, ref);
		}
		
		

	13. resolveReference(Object argName, RuntimeBeanReference ref)                  ------BeanDefinitionValueResolver.resolveReference
        具体处理方法
		
		//调用beanFactory 方法获取 oprInfoServer 对象
		Object bean = this.beanFactory.getBean(refName);
		
	14. 此时 按照 上面的流程 再创建一个 oprInfoServer 实例
	
	    ------------------缓存中的对象------------------
		一级缓存 singletonObjects >>>
		二级缓存 earlySingletonObjects >>>
		三级缓存 singletonFactories >>> 	ObjectFactory<simpleBeanMcht> , ObjectFactory<simpleBeanOpr>
		----------------------------------------------------
	
	